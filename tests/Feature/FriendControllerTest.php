<?php

namespace Tests\Feature;

use App\FriendRequest;
use App\Profile;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class FriendControllerTest extends TestCase
{
    use RefreshDatabase;
    protected $user;
    protected $friend;

    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user=factory(User::class)->create();
        $this->friend=factory(User::class)->create();
        factory(Profile::class)->create(['user_id'=>  $this->user['id']]);
        factory(Profile::class)->create(['user_id'=>$this->friend['id']]);

    }

    public function test_friends_page_can_be_rendered(){

        $this->withoutExceptionHandling();

        $this->actingAs($this->user,'login');
        $response = $this->get(route('friends.route'));

        $this->assertAuthenticated();
        $response->status(200);
        $response->assertSeeText('Friends',false);
        $this->assertTrue(url()->current() === route('friends.route'));

    }
    public function test_user_can_send_friend_request(){

        $this->withoutExceptionHandling();
        $this->actingAs($this->user,'login');
        $response = $this->post(route('friends.add.route',$this->friend['id']));

        $this->assertAuthenticated();
        $response->status(200);
        $response->assertJson(['check'=>'success']);
        $requestID=$this->user['id'].'_'.$this->friend['id'];
        $this->assertDatabaseHas('friend_requests',['id'=>$requestID,'status'=>'pending']);
        $this->assertTrue(url()->current() ===route('friends.add.route',$this->friend['id']));

    }

    public function test_user_can_accept_friend_request(){
        $friendRequestData=['id'=>$this->user['id'].'_'.$this->friend['id'],'user_id'=>$this->user['id'],'friend_id'=>$this->friend['id'],'status'=>'pending'];
        $friendRequest=FriendRequest::create($friendRequestData);
        $this->withoutExceptionHandling();

        $this->actingAs($this->user,'login');
        $response = $this->post(route('friends.approveRequest.route',$this->friend['id']));

        $this->assertAuthenticated();
        $response->status(200);
        $response->assertJson(['check'=>'success']);
        $requestID=$this->user['id'].'_'.$this->friend['id'];
        $this->assertDatabaseHas('friend_requests',['id'=>$requestID,'status'=>'approved']);
        $this->assertTrue(url()->current() ===route('friends.approveRequest.route',$this->friend['id']));
    }

    public function test_user_can_reject_friend_request(){

        $friendRequestData=['id'=>$this->user['id'].'_'.$this->friend['id'],'user_id'=>$this->user['id'],'friend_id'=>$this->friend['id'],'status'=>'pending'];
        $friendRequest=FriendRequest::create($friendRequestData);
        $this->withoutExceptionHandling();

        $this->actingAs($this->user,'login');
        $response = $this->post(route('friends.rejectRequest.route',$this->friend['id']));

        $this->assertAuthenticated();
        $response->status(200);
        $response->assertJson(['check'=>'success']);
        $friendRequest=FriendRequest::isFriend($this->user['id'],$this->friend['id']);
        $this->assertEquals(null,$friendRequest);
        $this->assertTrue(url()->current() ===route('friends.rejectRequest.route',$this->friend['id']));

    }

    public function test_user_can_unfriend_his_friend(){

        $friendRequestData=['id'=>$this->user['id'].'_'.$this->friend['id'],'user_id'=>$this->user['id'],'friend_id'=>$this->friend['id'],'status'=>'approved'];
        $friendRequest=FriendRequest::create($friendRequestData);
        $this->withoutExceptionHandling();

        $this->actingAs($this->user,'login');
        $response = $this->post(route('friends.unFriend.route',$this->friend['id']));

        $this->assertAuthenticated();
        $response->status(200);
        $response->assertJson(['check'=>'success']);
        $requestID=$this->user['id'].'_'.$this->friend['id'];
        $this->assertDatabaseMissing('friend_requests',['id'=>$requestID]);
        $this->assertTrue(url()->current() ===route('friends.unFriend.route',$this->friend['id']));

    }

}
