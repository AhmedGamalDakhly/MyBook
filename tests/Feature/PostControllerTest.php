<?php

namespace Tests\Feature;

use App\Content;
use App\Events\NotificationEvent;
use App\Profile;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class PostControllerTest extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $post;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $userID='user_id'.rand(11111,99999);
        $user=factory(User::class)->create(['id'=>$userID]);
        $this->user=$user;
        $profile=factory(Profile::class)->create(['user_id'=>$userID]);
        $this->post=factory(Content::class)->create(['user_id'=>$userID]);
    }


    public function test_user_can_create_post()
    {

        $this->withoutExceptionHandling();


        Event::fake(); // to stop dispatching events (Mocking)

        //authenticating user
        $this->actingAs($this->user,'login');

        //creating a post
        $postData=['text'=>'post text data' , 'page_type'=>'profile' , 'page_id'=>$this->user['id']];
        $response = $this->post(route('addNewPost.route'),$postData);
        $response->assertRedirect(route('home.route'));
        $response->assertLocation(route('home.route'));
        $response->assertStatus(302);
        Event::assertDispatched(NotificationEvent::class);
        //check created post data
        $this->assertDatabaseHas('contents',$postData);
        $this->assertDatabaseHas('contents',['user_id'=>$this->user['id'],'text'=>'post text data']);

    }

    public function test_user_can_delete_post()
    {

        $this->withoutExceptionHandling();

        //authenticating user
        $this->actingAs($this->user,'login');

        $response = $this->post(route('deletePost.route',$this->post['id']));
        $response->assertJson(['check'=>'success']);
        //check post deleted
        $this->assertDatabaseMissing('contents',['id'=>$this->post['id']]);
    }

}
